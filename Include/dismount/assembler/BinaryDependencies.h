#ifndef __TBA_DISMOUNT_ASSEMBLER_BINARYDEPENDECIES_H
#define __TBA_DISMOUNT_ASSEMBLER_BINARYDEPENDECIES_H

/*
 * BinaryDependencies.h
 *
 * Used for encoding binary dependency.
 * A binary dependencies could be refer to as a placeholder for the linker.
 * The following functions:
 *      jmp  label
 *      call fooBar
 *      mov  eax, OFFSET32 object
 * must be translated in later step in the compilation. In order to allow this
 * process to be accomplish, the compiler add a dependency inside this class.
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/data/string.h"
#include "xStl/data/list.h"
#include "xStl/data/serializedObject.h"

/*
 * See file header.
 *
 * Dependency holds the following:
 * name     - The name for the dependency, e.g. fooBar, object, label and more.
 * position - The position of the dependency inside the first-pass binary
 * length   - The length of the anchor left in the binary for that dependency.
 *
 * NOTE: This class is not thread-safe
 */
class BinaryDependencies : public cSerializedObject {
public:
    /*
     * Constructor. Generate new empty dependency tree
     */
    BinaryDependencies();

    // Copy-constructor and operator = will auto generated by the compiler

    //////////////////////////////////////////////////////////////////////////
    // Public Types

    // The different dependency types
    enum DependencyType {
        // The dependency is a label
        DEP_LABEL = 0,

        // The address should be decoded in relative form
        DEP_RELATIVE,
        //
        DEP_RELATIVE_OFFSET,
        // The address should be decoded in absolute form
        DEP_ABSOLUTE,
        // The address is relative to the beginning of the stack
        DEP_STACK_ARG,
        DEP_STACK_LOCAL,
        DEP_STACK_TEMP,
    };

    enum DependencyLength {
        DEP_8BIT = 1,
        DEP_16BIT = 2,
        //DEP_3BIT_3SKIP = 3,
        DEP_32BIT = 4,

        DEP_5BIT_5SPACE = 5,
        DEP_4BIT_LOWER = 6,
        DEP_8BIT_4SPACE = 9,

        DEP_11BIT = 11,
        DEP_12BIT = 12,
        DEP_19BIT_2BYTES_LITTLE_ENDIAN = 19,
        DEP_22BIT_2BYTES_LITTLE_ENDIAN = 22,
        DEP_22BIT_2BYTES_BIG_ENDIAN = 23,
        DEP_24BIT = 24,
    };

    /*
     * Holds the information regarding the dependency
     * See class header
     */
    class DependencyObject {
    public:
        // Constructor. Create new entry
        DependencyObject(const cString& name, uint position, uint length,
                         DependencyType type, uint shiftRightCount, bool shouldAddExistValue, int fix_offset, bool bUseParentFirstPass);
        // The dependency name
        cString m_name;
        // The location of the dependency
        uint m_position;
        // The length of the dependency
        uint m_length;
        // Shift size (For RISC compilers, the number of bits to shift)
        uint m_shiftRightCount;
        // Boolean indicating whether to use previous locations
        bool m_shouldAddExistValue;
        // The type for the dependency
        DependencyType m_type;
        // TODO! Pavel, please document
        int m_fixOffset;
        // Use the parent first-pass to compute offsets of locals/tempstack/arguments, instead of this first-pass
        bool m_bUseParentFirstPass;
    };
    typedef cList<DependencyObject> DependencyObjectList;

    //////////////////////////////////////////////////////////////////////////
    // Public methods

    /*
     * Add new dependency
     *
     * name     - The name of the dependency. See MangledNames
     * position - The position of the dependency encoded inside the block
     * length   - Number of bytes of which the dependency encoded
     * type     - The type for the dependency
     */
    void addDependency(const cString& name,
                       uint position,
                       uint length,
                       DependencyType type,
                       uint shiftRightCount = 0,
                       bool shouldAddExistValue = false,
                       int fix_offset = 0,
                       bool bUseParentFirstPass = false);
    /*
     * Add new dependency
     *
     * dependency - The dependency itself.
     */
    void addDependency(const DependencyObject& dependency);

    /*
     * Add new dependency to an immediate value
     *
     * name     - The name of the dependency. See MangledNames
     * position - The position of the dependency encoded inside the block
     * length   - Number of bytes of which the dependency encoded
     * type     - The type for the dependency
     */
    void addExtraBlockDependency(const cString& name,
                                 uint position,
                                 uint length,
                                 DependencyType type,
                                 uint shiftRightCount = 0,
                                 bool shouldAddExistValue = false);

    /*
     * Return the list of all dependencies
     */
    const DependencyObjectList& getList() const;
    DependencyObjectList& getList();

    /*
     * Return the number of extra blocks (immediate)
     */
    uint32 getExtraBlocks();

    // See cSerializedObject::isValid
    virtual bool isValid() const;
    // See cSerializedObject::deserialize
    virtual void deserialize(basicInput& inputStream);
    // See cSerializedObject::serialize
    virtual void serialize(basicOutput& outputStream) const;

private:
    // The list of all dependency
    DependencyObjectList m_dependency;

    // Number of extra blocks used
    static uint32 m_extraBlocks;
};

#endif // __TBA_DISMOUNT_ASSEMBLER_BINARYDEPENDECIES_H
